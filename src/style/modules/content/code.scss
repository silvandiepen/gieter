@use "sass:math";
@use "sass:map";

@function code-hsl($hue) {
  @return hsl(
    #{$hue},
    calc(#{var(--code-saturation, 50)} * 1%),
    calc(#{var(--code-lightness, 50)} * 1%)
  );
}

@function codeColor($group, $hue) {
  @return var(--code-#{to-lower-case($group)}, #{code-hsl($hue)});
}

@mixin styled-code() {
  // $primary-rgb: str-to-list(map-get($colors, "primary-rgb"), ",");
  // $secondary-rgb: str-to-list(map-get($colors, "secondary-rgb"), ",");

  // $primary-color: rgba(
  //   parseInt(nth($primary-rgb, 1)),
  //   parseInt(nth($primary-rgb, 2)),
  //   parseInt(nth($primary-rgb, 3))
  // );
  // $secondary-color: rgba(
  //   parseInt(nth($secondary-rgb, 1)),
  //   parseInt(nth($secondary-rgb, 2)),
  //   parseInt(nth($secondary-rgb, 3))
  // );

  // $primary-saturation: math.round(saturation($primary-color));
  // $secondary-saturation: math.round(saturation($secondary-color));

  // $primary-hue: math.round(hue($primary-color));
  // $secondary-hue: math.round(hue($secondary-color));

  $primary-color: map.get($theme-colors, "primary");
  $secondary-color: map.get($theme-colors, "secondary");

  $primary-hue: hue($primary-color);
  $secondary-hue: hue($secondary-color);

  [color-mode="dark"] {
    --code-lightness: 80;
    --code-saturation: 80;
  }
  [color-mode="light"] {
    --code-lightness: 33;
    --code-saturation: 80;
  }
  code {
    font-size: 0.875em;

    @media not print {
      background-color: v(primary-10);
      border: 1px solid v(primary-25);
      border-radius: v(borderRadius);
    }
    @media print {
      border: 1px solid v(foreground);
    }
  }

  pre:not([class]) code,
  pre[class^="language-"] {
    font-family: v(codeFontFamily);
    background-color: v(foreground-5);
    border-radius: v(borderRadius);
    & + code {
      margin: 0;
    }
    code {
      color: v(foreground);
    }

    @media print {
      background-color: transparent;
    }
  }
  pre[class^="language-"] code,
  pre code {
    background-color: transparent;
  }

  pre[class^="language-"] {
    position: relative;
    overflow: visible;
    &::before {
      content: "";
      display: block;
      position: absolute;
      right: v(space);
      top: 0;
      font-size: 0.75em;
      font-weight: bold;
      background-color: v(background);
      color: v(foreground);
      transform: translateY(-50%);
      padding: 0.5em;
      border-radius: v(borderRadius);
      @include bp(small, only) {
        right: v(space);
      }
      @media print {
        background-color: v(background);
      }
    }
    &.language-js::before {
      content: "js";
    }
    &.language-html::before {
      content: "html";
    }
    &.language-bash::before {
      content: "bash";
    }
    &.language-css::before {
      content: "css";
    }
    &.language-scss::before {
      content: "scss";
    }
    &.language-sass::before {
      content: "sass";
    }
    &.language-ts::before {
      content: "ts";
    }
    &.language-markdown::before {
      content: "markdown";
    }
    code {
      overflow: scroll;
      padding: v(space-l);
      display: block;
      @media print {
        padding: 1em;
      }
    }
  }
  td code,
  p code {
    display: inline-block;
    padding: 0.5em;
    line-height: 1;
  }
  @media not print {
    .token.comment,
    .token.prolog,
    .token.doctype,
    .token.cdata {
      --code-saturation: 0;
      color: codeColor(Comment, 0);
    }

    .token.punctuation {
      color: inherit;
      // color: codeColor(Punctuation, 100);
    }

    .namespace {
      opacity: 0.7;
    }

    .token.property,
    .token.symbol,
    .token.deleted {
      color: codeColor(Property, 40);
    }
    .token.tag {
      color: codeColor(Property, $secondary-hue);
    }
    .token.constant {
      color: codeColor(Property, 360 - $secondary-hue);
    }

    .token.boolean,
    .token.number {
      color: codeColor(Boolean, $primary-hue);
    }

    .token.selector,
    .token.attr-name,
    .token.string,
    .token.char,
    .token.builtin,
    .token.inserted {
      color: codeColor(Selector, 220);
    }

    .token.operator,
    .token.entity,
    .token.url,
    .language-css .token.string,
    .style .token.string,
    .token.variable {
      color: codeColor(Variable, 200);
    }

    .token.atrule,
    .token.attr-value,
    .token.function,
    .token.class-name {
      color: codeColor(Function, $primary-hue);
    }

    .token.keyword {
      color: codeColor(Keyword, 40);
    }

    .token.regex,
    .token.important {
      color: codeColor(Regex, 40);
    }

    .token.important,
    .token.bold {
      font-weight: bold;
    }

    .token.italic {
      font-style: italic;
    }

    .token.entity {
      cursor: help;
    }
  }
}
