@use "sass:math";

@function code-hsl($hue) {
  @return hsl(
    #{$hue},
    calc(#{var(--code-saturation, 50)} * 1%),
    calc(#{var(--code-lightness, 50)} * 1%)
  );
}

@function codeColor($group, $hue) {
  @return var(--code-#{to-lower-case($group)}, #{code-hsl($hue)});
}

@mixin styled-code() {
  $primary-color: map-get($colors, primary);
  $secondary-color: map-get($colors, secondary);

  $primary-saturation: math.round(saturation($primary-color));
  $secondary-saturation: math.round(saturation($secondary-color));

  $primary-hue: math.round(hue($primary-color));
  $secondary-hue: math.round(hue($secondary-color));

  [color-mode="dark"] {
    --code-lightness: 80;
    --code-saturation: 80;
  }
  [color-mode="light"] {
    --code-lightness: 33;
    --code-saturation: 80;
  }
  code {
    background-color: v(primary75);
    color: v(primary75Text);
    font-size: 0.875em;
    border-radius: v(borderRadius);
  }

  pre:not([class]) code,
  pre[class^="language-"] {
    background-color: transparent;
    color: v(foreground);
    border: 1px solid v(foreground10);
    color: v(foreground);
    padding: v(space);
    font-family: v(codeFontFamily);
    border-radius: v(borderRadius);
    overflow: scroll;
    max-width: 100%;
    display: block;
    & + code {
      margin: 0;
    }
    code {
      color: v(foreground);
    }
  }
  pre[class^="language-"] code,
  pre code {
    background-color: transparent;
  }

  pre[class^="language-"] {
    position: relative;
    &::before {
      content: "";
      display: block;
      position: absolute;
      right: v(space);
      top: 0;
      font-size: 0.75em;
      font-weight: bold;
      background-color: v(secondary);
      color: v(secondaryText);
      transform: translateY(-50%);
      padding: 0.5em;
      border-radius: v(borderRadius);
    }
    &.language-js::before {
      content: "js";
    }
    &.language-html::before {
      content: "html";
    }
    &.language-bash::before {
      content: "bash";
    }
    &.language-css::before {
      content: "css";
    }
    padding: 0;
    overflow: visible;
    code {
      overflow: scroll;
      padding: v(space);
      display: block;
    }
  }
  td code,
  p code {
    display: inline-block;
    padding: 0.5em;
    line-height: 1;
  }

  .token.comment,
  .token.prolog,
  .token.doctype,
  .token.cdata {
    --code-saturation: 0;
    color: codeColor(Comment, 0);
  }

  .token.punctuation {
    color: inherit;
    // color: codeColor(Punctuation, 100);
  }

  .namespace {
    opacity: 0.7;
  }

  .token.property,
  .token.symbol,
  .token.deleted {
    color: codeColor(Property, 40);
  }
  .token.tag {
    color: codeColor(Property, $secondary-hue);
  }
  .token.constant {
    color: codeColor(Property, 360 - $secondary-hue);
  }

  .token.boolean,
  .token.number {
    color: codeColor(Boolean, $primary-hue);
  }

  .token.selector,
  .token.attr-name,
  .token.string,
  .token.char,
  .token.builtin,
  .token.inserted {
    color: codeColor(Selector, 220);
  }

  .token.operator,
  .token.entity,
  .token.url,
  .language-css .token.string,
  .style .token.string,
  .token.variable {
    color: codeColor(Variable, 200);
  }

  .token.atrule,
  .token.attr-value,
  .token.function,
  .token.class-name {
    color: codeColor(Function, $primary-hue);
  }

  .token.keyword {
    color: codeColor(Keyword, 40);
  }

  .token.regex,
  .token.important {
    color: codeColor(Regex, 40);
  }

  .token.important,
  .token.bold {
    font-weight: bold;
  }

  .token.italic {
    font-style: italic;
  }

  .token.entity {
    cursor: help;
  }
}
