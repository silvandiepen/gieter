$prefix: null;

@if has-setting("prefix") {
  $prefix: "#{get-setting("prefix")}-";
}

@mixin colormode() {
  $switch-size: 2em;

  $colorModeClass: get-setting("define.colormode.class");

  $switch-stroke: calc(#{$switch-size} * 0.1);
  $switch-color: v(foreground50);
  $switch-margin: calc(#{$switch-size} * 4);
  $switch-dot-size: calc(#{$switch-size} - (#{$switch-size} * 0.4));

  $switch-settings: (
    switchStroke: $switch-stroke,
    switchColor: $switch-color,
    switchMargin: $switch-margin,
    switchDotSize: $switch-dot-size,
  );

  #{$colorModeClass} {
    @include customProperties($switch-settings);

    border: #{variable(switchStroke, $switch-stroke)} solid #{variable(
        switchColor,
        $switch-color
      )};
    width: calc(#{$switch-size} * 1.5);
    height: calc(#{$switch-size} * 1);
    display: block;
    background-color: transparent;
    border-radius: $switch-size;
    position: relative;
    text-indent: -999em;
    color: variable(switchColor, $switch-color);
    transition: opacity variable(transition);
    opacity: 0.5;
    &:hover {
      opacity: 1;
    }
    &:focus {
      outline: none;
      box-shadow: 0 0 10px 0 variable(primary);
    }
    &::before {
      content: "";
      display: block;
      position: absolute;
      left: 0;
      top: 50%;
      transition: transform 0.3s ease-in-out,
        background-position 0.3s ease-in-out, background-size 0.3s ease-in-out;
      transform: translate(
        calc(0% + #{variable(switchStroke, $switch-stroke)}),
        -50%
      );
      background-color: currentColor;
      border-radius: 50%;
      width: variable(switchDotSize, $switch-dot-size);
      height: variable(switchDotSize, $switch-dot-size);
      background: radial-gradient(
        circle at 50%,
        transparent,
        transparent 33.33%,
        #{variable(switchColor, $switch-color)} 33.33%
      );

      background-repeat: no-repeat;
      background-size: calc(#{$switch-size} * 2) 100%;
      background-position: -0% 50%;
    }
    // The after is a label shown to display the current mode. By default this doesn't show because the after does not have a content.
    // The after can be shown by adding a content in custom css.
    &::after {
      background-color: variable(text);
      color: variable(background);
      position: absolute;
      left: 50%;
      top: 100%;
      transform: translate(-50%, calc(#{variable(switch-stroke)} * 2)) scale(0);
      font-size: 0.8em;
      padding: 0.5em 1em;
      border-radius: variable(borderRadius);
      display: block;
      text-indent: 0;
      opacity: 0;
      transition: transform variable(transition);
    }
    &:hover::after {
      transform: translate(-50%, calc(#{variable(switch-stroke)} * 2)) scale(1);
      opacity: 1;
    }
  }
  [color-mode="dark"] {
    #{$colorModeClass}::before {
      transform: translate(calc(100%), -50%) rotate(180deg);
      background-position: 25% 50%;
    }
  }
}
