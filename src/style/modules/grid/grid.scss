$breakpoint-names: get-setting("grid.breakpoint.names");
$breakpoint-sizes: get-setting("grid.breakpoint.sizes");
$row: #{get-setting("define.row.class")};
$column: #{get-setting("define.column.class")};
$grid-total: get-setting("grid.total");

@mixin row($settings: ()) {
  $row-settings: map-merge(
    (
      gap: 0,
      total: $grid-total,
    ),
    $settings
  );
  display: grid;
  grid-auto-flow: row;
  grid-column-gap: v(gap, map-get($row-settings, gap));
  grid-row-gap: v(gap, map-get($row-settings, gap));
  --row-columns: repeat(
    #{v(row-total, #{map-get($row-settings, total)})},
    1fr
  );
  grid-template-columns: v(row-columns);
  grid-template-rows: auto;
}

@mixin column($pref: null, $add: null) {
  @each $size-name, $size-value in $breakpoint-sizes {
    $className: "";
    @if $pref {
      $className: unquote("#{$add}#{$pref}--#{$size-name}");
    } @else {
      $className: unquote("#{$add}.#{$size-name}");
    }
    #{$className} {
      $grid-total-fifth: $grid-total * $size-value;

      @if $grid-total-fifth != ceil($grid-total-fifth) {
        grid-column: span (25 * $size-value);
      } @else {
        grid-column: span ($grid-total * $size-value);
      }
    }
  }
}

@mixin grid-row() {
  #{$row} {
    @include row();
  }
  #{$row}#{$row}--fifths {
    @include row(
      (
        total: 25,
      )
    );
  }
}

@mixin grid-column() {
  #{$column} {
    width: 100%;
    &--middle {
      display: flex;
      align-items: center;
    }
    &--center {
      display: flex;
      justify-content: center;
    }
  }
}
